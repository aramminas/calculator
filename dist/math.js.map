{"version":3,"sources":["../modules/math.js"],"names":["pow","base","exponent","Math","hypotenuse","adjacent","opposite","hypot","circleArea","radius","PI"],"mappings":";;;;;AAAA;;;;AAIA,IAAMA,MAAM,SAANA,GAAM,CAACC,IAAD,EAAOC,QAAP;AAAA,SAAoBC,KAAKH,GAAL,CAASC,IAAT,EAAeC,QAAf,CAApB;AAAA,CAAZ;;AAEA;;;;AAIA,IAAME,aAAa,SAAbA,UAAa,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAyB;AACxCD,sBADwC;AAExCC,sBAFwC;AAGxCF,gBAAYD,KAAKI,KAAL,CAAWF,QAAX,EAAqBC,QAArB;AAH4B,GAAzB;AAAA,CAAnB;;AAMA;;;AAGA,IAAME,aAAa,SAAbA,UAAa,CAACC,MAAD;AAAA,SAAYN,KAAKO,EAAL,GAAUP,KAAKH,GAAL,CAASS,MAAT,EAAiB,CAAjB,CAAtB;AAAA,CAAnB;;QAGIT,G,GAAAA,G;QACAI,U,GAAAA,U;QACAI,U,GAAAA,U","file":"math.js","sourcesContent":["/** The pow() function returns the base to the exponent power.\n * @param {number} base\n * @param {number} exponent\n */\nconst pow = (base, exponent) => Math.pow(base, exponent);\n\n/** The hypotenuse() function returns the square root of the sum of squares of its arguments.\n * @param {number} adjacent\n * @param {number} opposite\n */\nconst hypotenuse = (adjacent, opposite) => ({\n    adjacent,\n    opposite,\n    hypotenuse: Math.hypot(adjacent, opposite),\n});\n\n/** The circleArea() function calculates the area of a circle according to the radius.\n * @param {number} radius\n */\nconst circleArea = (radius) => Math.PI * Math.pow(radius, 2);\n\nexport {\n    pow,\n    hypotenuse,\n    circleArea,\n};"]}